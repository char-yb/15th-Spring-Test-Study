package com.domo.mock;

import com.domo.user.domain.User;
import com.domo.user.domain.UserStatus;
import com.domo.user.service.port.UserRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(1);
    private final List<User> users = new ArrayList<>();

    @Override
    public Optional<User> findById(long id) {
        return users.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Optional<User> findByIdAndStatus(long id, UserStatus userStatus) {
        return users.stream().filter(item -> item.getId().equals(id) && item.getStatus().equals(userStatus)).findAny();
    }

    @Override
    public Optional<User> findByEmailAndStatus(String email, UserStatus userStatus) {
        return users.stream().filter(item -> item.getEmail().equals(email) && item.getStatus().equals(userStatus)).findAny();
    }

    @Override
    public User save(User user) {
        if (user.getId() == null || user.getId() == 0) {
            User newUser = User.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(user.getEmail())
                    .nickname(user.getNickname())
                    .address(user.getAddress())
                    .status(user.getStatus())
                    .certificationCode(user.getCertificationCode())
                    .lastLoginAt(user.getLastLoginAt())
                    .build();
            users.add(user);
            return newUser;
        } else {
            User finalUser = user;
            users.removeIf(item -> Objects.equals(item.getId(), finalUser.getId()));
            users.add(user);
            return user;
        }
    }
}
